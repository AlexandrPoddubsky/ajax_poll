<?php

/**
 * @file
 * Enables voting on polls without reloading the page.
 */

/**
 * Implements hook_menu().
 */
function ajax_poll_menu() {
  return array(
    'poll/ajax/vote/%node/%/%' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'ajax_poll_callback',
      'page arguments' => array(2, 3, 4, 5),
      'access arguments' => array('vote on polls'),
    ),
    'poll/ajax/cancel/%node/%/%' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'ajax_poll_callback',
      'page arguments' => array(2, 3, 4, 5),
      'access arguments' => array('cancel own vote'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function ajax_poll_form_alter(&$form, $form_state, $form_id) {
  if (in_array($form_id, array('poll_view_voting', 'poll_cancel_form'))) {
    $form['#attached']['library'][] = array('system', 'jquery.form');
    $form['#attached']['js'][] = drupal_get_path('module', 'ajax_poll') . '/ajax_poll.js';

    $node = isset($form['#node']) ? $form['#node'] : node_load($form['#nid']);

    $teaser = (int) isset($node->teaser);
    $block = (int) !empty($form['#block']);

    $action = ($form_id == 'poll_view_voting') ? 'vote' : 'cancel';

    $form['ajax_url'] = array(
      '#type' => 'hidden',
      '#value' => url('poll/ajax/' . $action . '/' . $node->nid . '/' . $teaser . '/' . $block),
    );

    $form['ajax_text'] = array(
      '#type' => 'hidden',
      '#value' => ($action == 'vote') ? t('Voting...') : t('Canceling...'),
    );

    // Add the AJAX Poll class to the form.
    if (empty($form['#attributes']['class'])) {
      $form['#attributes']['class'] = array('ajax-poll');
    }
    else {
      $form['#attributes']['class'][] = 'ajax-poll';
    }

    $form['#attributes']['class'][] = ' ajax-' . $action;

    // Add submit handler to supress redirection on AJAX requests.
    if ($action == 'vote') {
      $form['vote']['#submit'][] = 'ajax_poll_submit';

      $form['#prefix'] = '<div class="ajax-poll-wrapper">';
      $form['#suffix'] = '</div>';
    }
    else {
      $form['actions']['submit']['#submit'][] = 'ajax_poll_submit';
    }
  }
}

/**
 * Form API #submit handler. Disable redirects if doing an AJAX vote.
 */
function ajax_poll_submit(&$form, &$form_state) {
  if (strpos($_GET['q'], 'poll/ajax') === 0) {
    $form_state['redirect'] = FALSE;
  }
}

/**
 * Menu callback for poll/ajax.
 */
function ajax_poll_callback($type, $node, $teaser, $block) {
  // Call poll_view to trigger the current submit handlers.
  poll_view($node, 'full');

  // Reset POST and the $node so that we get fresh copies.
  unset($_POST);
  $node = node_load($node->nid, NULL, TRUE);

  $content = ajax_poll_get_poll_content($node, $block, $teaser, $type);

  $status = count(drupal_get_messages('error', FALSE)) == 0;
  $messages = theme('status_messages');
  $output = drupal_render($content);

  drupal_json_output(array('status' => $status, 'messages' => $messages, 'output' => $output));
}

/**
 * Utility function that obtains the content of the poll node.
 *
 * @param stdClass
 *   $node The node object.
 *
 * @param boolean
 *   $is_block Whether or not the content is being presented in a block.
 *
 * @param boolean
 *   $is_teaser Whether or not the content is being rendered as a teaser.
 *
 * @param string
 *   $type vote or cancel.
 *
 */
function ajax_poll_get_poll_content(stdClass $node, $is_block, $is_teaser, $type) {
  if (!$is_block) {
    $view_mode = $is_teaser ? 'teaser' : 'full';

    if ($type == 'vote') {
      // This will allow for node overrides of the results screen.
      $poll = node_view($node, $view_mode);
      $content = $poll['poll_view_results'];
    }
    // Cancel
    else {
      // This will give us the voting form.
      $poll = poll_view($node, $view_mode);
      $content = $poll->content;
    }
  }
  else {
    $poll = ajax_poll_block_latest_poll_view($node);
    $content = $poll->content;
  }

  return $content;
}

/**
 * Return content for 'latest poll' block. This is a modified function cloned
 * from the poll module. Ajax poll does not need to replace the links on the
 * page so that has been removed.
 *
 * @see poll.module.
 *
 * @param $node
 *   The node object to load.
 */
function ajax_poll_block_latest_poll_view($node) {
  // This is necessary for shared objects because PHP doesn't copy objects, but
  // passes them by reference.  So when the objects are cached it can result in
  // the wrong output being displayed on subsequent calls.  The cloning and
  // unsetting of $node->content prevents the block output from being the same
  // as the node output.
  $node = clone $node;
  unset($node->content);

  // No 'read more' link.
  $node->readmore = FALSE;
  $node->teaser = '';

  if (!empty($node->allowvotes)) {
    $node->content['poll_view_voting'] = drupal_get_form('poll_view_voting', $node, TRUE);
  }
  else {
    $node->content['poll_view_results'] = array('#markup' => poll_view_results($node, TRUE, TRUE));
  }

  return $node;
}